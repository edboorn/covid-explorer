{"version":3,"sources":["util.js","api/index.js","layout/spinner.js","pages/home/stats-data/stats-data.js","pages/home/global-timeseries/global-timeseries-graph.js","pages/home/global-timeseries/global-timeseries.js","pages/home/home.js","pages/country-breakdown/countries-render.js","pages/country-breakdown/country-breakdown-page.js","pages/country-specific/page-components/country-graphs.js","pages/country-specific/country-specific.js","layout/nav.js","App.js","serviceWorker.js","index.js"],"names":["numberFormatter","num","toString","replace","url","fetchGlobalStats","a","axios","get","data","date","result","globalTimeseries","formattedData","Object","entries","map","key","value","countryBreakdown","country","startDate","endDate","count","isError","errorData","countryLatest","Spinner","className","role","StatsData","handleStatsChange","useState","stats","setStats","useEffect","fetchAPI","undefined","formattedConfirmed","confirmed","formattedRecovered","recovered","formattedDeaths","deaths","globaltimeseriesgraph","graphData","width","height","strokeWidth","type","dataKey","stroke","globaltimeseries","setData","fetchApi","length","home","countriesrender","countryCode","formattedCountry","NewCountryCode","lookup","byIso","nullCheck","to","getData","item","i","CountryGraph","todaysDate","separator","newDate","Date","getDate","month","getMonth","year","getFullYear","getTodaysDate","countryData","setCountryData","setStartDate","setEndDate","params","useParams","placeholder","onChange","e","target","defaultValue","min","max","onClick","Nav","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","path","exact","component","Home","CountryBreakdown","CountryData","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAYaA,EAAkB,SAACC,GAC9B,OAAOA,EAAIC,WAAWC,QAAQ,0BAA2B,Q,yBCTrDC,EAAM,+BAGCC,EAAgB,uCAAG,kCAAAC,EAAA,+EAEcC,IAAMC,IAAN,UAAaJ,EAAb,YAFd,2BAEjBK,KAAQC,EAFS,EAETA,KAAMC,EAFG,EAEHA,OAFG,kBAGjB,CAACD,OAAMC,WAHU,2HAAH,qDAWhBC,EAAgB,uCAAG,gCAAAN,EAAA,+EAEHC,IAAMC,IAAN,UAAaJ,EAAb,kBAFG,uBAEjBK,EAFiB,EAEjBA,KACDI,EAAgBC,OAAOC,QAAQN,EAAKE,QAAQK,KAAI,mCAAEC,EAAF,KAAOC,EAAP,2BAAuBA,EAAvB,CAA8BR,KAAMO,OAHlE,kBAIjB,CAACJ,kBAJgB,wHAAH,qDAuBhBM,EAAgB,uCAAG,WAAOC,EAASC,EAAWC,GAA3B,uBAAAhB,EAAA,+EAGgBC,IAAMC,IAAN,UAAaJ,EAAb,oBAA4BgB,EAA5B,uBAAkDC,EAAlD,YAA+DC,IAH/E,2BAGjBb,KAASc,EAHQ,EAGRA,MAAOZ,EAHC,EAGDA,OAHC,kBAIjB,CAACY,QAAOZ,SAAQa,SAAU,IAJT,yCAOlBC,EAAY,CAAEF,MAAO,EAAGZ,OAAS,GAAIa,SAAU,GAP7B,kBAQjBC,GARiB,0DAAH,0DAahBC,EAAa,uCAAG,8BAAApB,EAAA,+EAEAC,IAAMC,IAAN,UAAaJ,EAAb,mBAFA,uBAEdK,EAFc,EAEdA,KAFc,kBAIdA,GAJc,wHAAH,qDC1CXkB,EAVC,WACd,OACE,yBAAKC,UAAU,iCACb,yBAAKA,UAAU,iBAAiBC,KAAK,UACnC,0BAAMD,UAAU,WAAhB,iBC2BOE,EA1BG,SAAC,GAA0B,EAAxBC,kBAAyB,IAAD,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,KAS3C,GANAC,qBAAU,YACM,uCAAG,sBAAA7B,EAAA,kEACf4B,EADe,SACA7B,IADA,6EAAH,qDAGd+B,KACC,SACkBC,IAAjBJ,EAAMtB,OACR,OAAO,4BAEP,IAAI2B,EAAqBtC,EAAgBiC,EAAMtB,OAAO4B,WAClDC,EAAqBxC,EAAgBiC,EAAMtB,OAAO8B,WAClDC,EAAkB1C,EAAgBiC,EAAMtB,OAAOgC,QACnD,OACE,6BACE,0DAAgCV,EAAMvB,KAAtC,KACA,kDACuB4B,EADvB,qBAC6DE,EAD7D,mBACiGE,EADjG,a,OCqBOE,EAlCe,SAACC,GAC7B,OACE,6BACE,kBAAC,IAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CAAWtC,KAAMoC,EAAUA,UAAUhC,eACnC,kBAAC,IAAD,CACEmC,YAAa,EACbC,KAAK,WACLC,QAAQ,YACRC,OAAO,YAET,kBAAC,IAAD,CACEH,YAAa,EACbC,KAAK,WACLC,QAAQ,SACRC,OAAO,YAET,kBAAC,IAAD,CACEH,YAAa,EACbC,KAAK,WACLC,QAAQ,YACRC,OAAO,YAET,kBAAC,IAAD,CAAOD,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,UCdKE,EAnBU,WAAO,IAAD,EACHpB,mBAAS,IADN,mBACpBvB,EADoB,KACd4C,EADc,KAQ3B,OANAlB,qBAAU,YACQ,uCAAG,sBAAA7B,EAAA,kEACb+C,EADa,SACCzC,IADD,6EAAH,qDAGd0C,KACD,SACUjB,IAAT5B,GAAsC,IAAhBA,EAAK8C,OACpB,kBAAC,EAAD,MAGP,6BACI,kBAAC,EAAD,CAAiBV,UAAWpC,MCfzB,SAAS+C,IACpB,OACE,6BACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,QAGJ,kBAAC,EAAD,O,qBC8CO6B,EApDS,SAACZ,GAGvB,IAgBIhC,EAAgBC,OAAOC,QACzB8B,EAAUA,WACV7B,KAAI,mCAAEC,EAAF,KAAOC,EAAP,2BAAwBA,EAAxB,CAA+BwC,YAAazC,OAE9CqB,EAAqBtC,EAAgBa,EAAc,GAAG0B,WACtDC,EAAqBxC,EAAgBa,EAAc,GAAG4B,WACtDC,EAAkB1C,EAAgBa,EAAc,GAAG8B,QACjDgB,EAvBY,SAACD,GACjB,IAAIE,EAAiB,CACnBxC,QAAS,uBAEX,GAAoB,SAAhBsC,EAAwB,CAC1B,IAAMC,EAAmBE,IAAOC,MAAMjD,EAAc,GAAG6C,aACvD,OAAyB,OAArBC,EACKA,EAEAC,EAGT,OAAOA,EAWcG,CAAUlD,EAAc,GAAG6C,aAEpD,OAA2B,OAAvBpB,EACK,kBAAC,EAAD,MAGL,yBAAKV,UAAU,YACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,aACb,4BAAK+B,EAAiBvC,SACtB,iDAAuBkB,EAAvB,KACA,gDAAsBE,EAAtB,KACA,wCAAcE,EAAd,KACA,kBAAC,IAAD,CACEsB,GAAE,uCAAkCnD,EAAc,GAAG6C,aACrD9B,UAAU,0BAFZ,iBCaGT,EApDU,WAAO,IAAD,EACLa,mBAAS,IADJ,mBACtBvB,EADsB,KAChB4C,EADgB,OAEDrB,qBAFC,6BAI7BG,qBAAU,YACK,uCAAG,sBAAA7B,EAAA,kEACd+C,EADc,SACA3B,IADA,6EAAH,qDAGbuC,KACC,IAOH,YAAoB5B,IAAhB5B,EAAKE,OACA,kBAAC,EAAD,MAGL,6BACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,OACb,wCAAcnB,EAAKc,MAAnB,eACA,gDAAsBd,EAAKC,QAiB/B,4BACA,yBAAKkB,UAAU,OACZnB,EAAKE,OAAOK,KAAI,SAACkD,EAAMC,GAAP,OACf,kBAAC,EAAD,CAAiBlD,IAAKkD,EAAGtB,UAAWqB,UCHjCE,EAlCM,SAAC,GAAmB,IAAjBvB,EAAgB,EAAhBA,UACtB,OACE,yBAAKjB,UAAU,eACb,kBAAC,IAAD,CAAqBkB,MAAM,MAAMC,OAAQ,KACzC,kBAAC,IAAD,CAAWtC,KAAMoC,GACf,kBAAC,IAAD,CACEG,YAAa,EACbC,KAAK,WACLC,QAAQ,YACRC,OAAO,YAET,kBAAC,IAAD,CACEH,YAAa,EACbC,KAAK,WACLC,QAAQ,SACRC,OAAO,YAET,kBAAC,IAAD,CACEH,YAAa,EACbC,KAAK,WACLC,QAAQ,YACRC,OAAO,YAET,kBAAC,IAAD,CAAOD,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,UC5BO,SAAS9B,IACtB,IAAMiD,EVbqB,WAAsB,IAArBC,EAAoB,uDAAR,IACpCC,EAAU,IAAIC,KACd9D,EAAO6D,EAAQE,UACfC,EAAQH,EAAQI,WAAa,EAC7BC,EAAOL,EAAQM,cAEnB,MAAM,GAAN,OAAUD,GAAV,OAAiBN,GAAjB,OACEI,EAAQ,GAAR,WAAiBA,GAAjB,UAA8BA,IADhC,OAEGJ,GAFH,OAEe5D,GUKIoE,GADa,EAGM9C,mBAAS,IAHf,mBAGzB+C,EAHyB,KAGZC,EAHY,OAIEhD,mBAAS,cAJX,mBAIzBX,EAJyB,KAId4D,EAJc,OAKFjD,mBAASqC,GALP,mBAKzB/C,EALyB,KAKhB4D,EALgB,KAO5BC,EAASC,cAEbjD,qBAAU,YACM,uCAAG,sBAAA7B,EAAA,kEACf0E,EADe,SAEP7D,EAAiBgE,EAAOzB,YAAarC,EAAWC,GAFzC,6EAAH,qDAKdc,KACC,CAACf,EAAWC,IAaf,GAAIyD,EAAYvD,QACd,OACE,6BACE,sCACA,uDACA,4BACG,IADH,qFAKA,kBAAC,IAAD,CACEwC,GAAG,4BACHpC,UAAU,4BAFZ,yBASN,QAA2BS,IAAvB0C,EAAYpE,QAAsD,IAA9BoE,EAAYpE,OAAO4C,OACzD,OAAO,kBAAC,EAAD,MAEP,IAAMI,EAAmBE,IAAOC,MAAMqB,EAAOzB,aAC7C,OACE,6BACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEoC,GAAG,4BACHpC,UAAU,4BAFZ,YAOF,yBAAKA,UAAU,YACb,4BAAK+B,EAAiBvC,UAExB,yBAAKQ,UAAU,YACb,8BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,yBAEA,2BACEqB,KAAK,OACLrB,UAAU,eACVyD,YAAY,YACZC,SA1DM,SAACC,GACvBN,EAAaM,EAAEC,OAAOtE,QA0DNuE,aAAcpE,EACdqE,IAAI,aACJC,IAAKtB,IAEP,2BACEpB,KAAK,OACLrB,UAAU,eACVyD,YAAY,UACZC,SAhEI,SAACC,GACrBL,EAAWK,EAAEC,OAAOtE,QAgEJuE,aAAcpB,EACdqB,IAAI,aACJC,IAAKtB,OAKf,yBAAKzC,UAAU,YACf,4BAAQqB,KAAK,SAASrB,UAAU,eAAegE,QAtErC,WAChBX,EAAa,cACbC,EAAWb,KAoEL,WAIF,kBAAC,EAAD,CAAcxB,UAAWkC,EAAYpE,UCtG9B,SAASkF,IACtB,OACE,kBAAC,IAAD,KACE,yBAAKjE,UAAU,+CACb,uBAAGA,UAAU,eAAekE,KAAK,mBAAjC,qBAGA,4BACElE,UAAU,iBACVqB,KAAK,SACL8C,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMvE,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BwE,GAAG,0BAC3C,wBAAIxE,UAAU,cACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWoC,GAAG,mBAC5B,wBAAIpC,UAAU,YAAd,SAEF,kBAAC,IAAD,CAAMA,UAAU,WAAWoC,GAAG,6BAC5B,wBAAIpC,UAAU,YAAd,iBAKR,yBAAKA,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyE,KAAK,kBAAkBC,OAAK,EAACC,UAAWC,IAC/C,kBAAC,IAAD,CACEH,KAAK,4BACLC,OAAK,EACLC,UAAWE,IAEb,kBAAC,IAAD,CACEJ,KAAK,4CACLC,OAAK,EACLC,UAAWG,MAIjB,yBAAK9E,UAAU,UACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,uBACEA,UAAU,iBACV4D,OAAO,SACPmB,IAAI,sBACJb,KAAK,8BAEJ,IANH,qCAOqC,MAGvC,yBAAKlE,UAAU,YAAf,KACA,yBAAKA,UAAU,YACb,uBACEA,UAAU,iBACV4D,OAAO,SACPmB,IAAI,sBACJb,KAAK,8CAEJ,IANH,cAOc,SC7DXc,MARf,WACE,OACE,yBAAKhF,UAAU,OACb,kBAACiE,EAAD,QCIcgB,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4945cc2.chunk.js","sourcesContent":["export const getTodaysDate = (separator = \"-\") => {\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth() + 1;\n  let year = newDate.getFullYear();\n\n  return `${year}${separator}${\n    month < 10 ? `0${month}` : `${month}`\n  }${separator}${date}`;\n};\n\n\nexport const numberFormatter = (num) => {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n};","// Use the page to do any API calls & Data Manipulation\n\nimport axios from 'axios'\n\nconst url = 'https://covidapi.info/api/v1'\n\n// Latest Global Count\nexport const fetchGlobalStats = async () => {\n    try {\n        const {data : {date, result}} = await axios.get(`${url}/global`);\n        return {date, result} // TODO : Consider whether there is a need to destructure\n    }\n    catch (error){\n        return error\n    }\n}\n\n//Datewise count of worldwide cases\nexport const globalTimeseries = async () => {\n    try {\n        const {data} = await axios.get(`${url}/global/count`);\n        const formattedData = Object.entries(data.result).map(([key, value]) => ({...value, date: key})) // Moves the date from the index to inside the object\n        return {formattedData} \n    }\n    catch (error){\n        return error\n    }\n}\n\n// Global data,broken down by each country in between the data range (Extrememly hard to use/render)\nexport const globalBreakdown = async (startDate, endDate) => {\n    try {\n    const {data : {count, result}} = await axios.get(`${url}/global/timeseries/${startDate}/${endDate}`)\n    return {count, result}\n    }\n    catch (error) {\n        return error;\n    }\n}\n\n// Individual counties timeseries data\nexport const countryBreakdown = async (country, startDate, endDate) => {\n\n    try {\n        const {data : { count, result}} = await axios.get(`${url}/country/${country}/timeseries/${startDate}/${endDate}`)\n        return {count, result, isError : false}\n    }\n    catch (error) {\n        const errorData = { count :0, result : [], isError : true};\n        return errorData\n    }\n}\n\n// Get the latest data for each country\nexport const countryLatest = async () => {\n    try {\n        const {data} = await axios.get(`${url}/global/latest`)\n        //console.log(data)\n        return data\n    }\n    catch (error) {\n        return error\n    }\n}","import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useEffect, useState } from \"react\";\nimport {numberFormatter} from '../../../util'\nimport { fetchGlobalStats } from \"../../../api/index\";\nimport Spinner from \"../../../layout/spinner\";\n\nconst StatsData = ({ handleStatsChange }) => {\n  const [stats, setStats] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setStats(await fetchGlobalStats());\n    };\n    fetchAPI();\n  }, []);\n  if (stats.result === undefined) {\n    return <p></p> // Not convinced this does a lot, other than to slow the execution long enough for the data to load\n  } else {\n    let formattedConfirmed = numberFormatter(stats.result.confirmed)\n    let formattedRecovered = numberFormatter(stats.result.recovered)\n    let formattedDeaths = numberFormatter(stats.result.deaths)\n    return (\n      <div>\n        <h3> How is the world doing on {stats.date} </h3>\n        <p>\n          There are currently {formattedConfirmed} confirmed cases, {formattedRecovered} recoveries and {formattedDeaths} deaths\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default StatsData;\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  CartesianGrid,\n} from \"recharts\";\n\nconst globaltimeseriesgraph = (graphData) => {\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={700}>\n        <LineChart data={graphData.graphData.formattedData}>\n          <Line\n            strokeWidth={2}\n            type=\"monotone\"\n            dataKey=\"confirmed\"\n            stroke=\"#8884d8\"\n          />\n          <Line\n            strokeWidth={2}\n            type=\"monotone\"\n            dataKey=\"deaths\"\n            stroke=\"#FF2D00\"\n          />\n          <Line\n            strokeWidth={2}\n            type=\"monotone\"\n            dataKey=\"recovered\"\n            stroke=\"#27FF00\"\n          />\n          <XAxis dataKey=\"date\" />\n          <Legend />\n          <Tooltip />\n          <CartesianGrid />\n          <YAxis />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default globaltimeseriesgraph;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, {useEffect, useState} from 'react'\nimport {globalTimeseries} from '../../../api/index'\nimport Spinner from '../../../layout/spinner'\n\nimport TimeSeriesGraph from './global-timeseries-graph'\nconst globaltimeseries = () => {\n    const [data, setData] = useState([])\n    useEffect(() => {\n        const fetchApi = async () => {\n            setData(await globalTimeseries());\n        }\n        fetchApi();\n    }, [])\n    if (data === undefined || data.length === 0){\n        return <Spinner/>\n    } else {\n    return (\n        <div>\n            <TimeSeriesGraph graphData={data}/>\n        </div>\n    )\n    }\n}\n\nexport default globaltimeseries;","import React from \"react\";\n\nimport StatsData from \"./stats-data/stats-data\";\nimport GlobalTimeSeries from \"./global-timeseries/global-timeseries\";\nexport default function home() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <StatsData />\n          </div>\n        </div>\n        <GlobalTimeSeries />\n      </div>\n    );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport lookup from \"country-code-lookup\";\nimport { numberFormatter } from \"../../util\";\nimport Spinner from \"../../layout/spinner\";\n\nconst countriesrender = (graphData) => {\n\n\n  const nullCheck = (countryCode) => {\n    var NewCountryCode = {\n      country: \"Code Not Recognised\",\n    };\n    if (countryCode !== \"null\") {\n      const formattedCountry = lookup.byIso(formattedData[0].countryCode);\n      if (formattedCountry !== null) {\n        return formattedCountry;\n      } else {\n        return NewCountryCode;\n      }\n    } else {\n      return NewCountryCode;\n    }\n  };\n\n  let formattedData = Object.entries(\n    graphData.graphData\n  ).map(([key, value]) => ({ ...value, countryCode: key }));\n\n  let formattedConfirmed = numberFormatter(formattedData[0].confirmed);\n  let formattedRecovered = numberFormatter(formattedData[0].recovered);\n  let formattedDeaths = numberFormatter(formattedData[0].deaths);\n  const formattedCountry = nullCheck(formattedData[0].countryCode);\n\n  if (formattedConfirmed === null) {\n    return <Spinner />;\n  } else {\n    return (\n      <div className=\"col-md-4\">\n        <div className=\"card mb-4 shadow-sm\">\n          <div className=\"card-body\">\n            <h3>{formattedCountry.country}</h3>\n            <p> Confirmed Cases - {formattedConfirmed} </p>\n            <p> Recovered Cases -{formattedRecovered} </p>\n            <p> Deaths - {formattedDeaths} </p>\n            <Link\n              to={`/covid-explorer/country-data/${formattedData[0].countryCode}`}\n              className=\"btn btn-dark btn-block\"\n            >\n              View More\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default countriesrender;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useEffect, useState } from \"react\";\nimport { countryLatest } from \"../../api/index\";\nimport CountriesRender from \"./countries-render\";\nimport Spinner from \"../../layout/spinner\";\n\nconst countryBreakdown = () => {\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState();\n\n  useEffect(() => {\n    const getData = async () => {\n      setData(await countryLatest());\n    };\n    getData();\n  }, []);\n\n  const searchInput = (e) => {\n    console.log(e.target.value);\n    setSearch(e.target.value);\n  };\n\n  if (data.result === undefined) {\n    return <Spinner />;\n  } else {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1> Data on {data.count} countries </h1>\n            <h3> Last Updated on {data.date}</h3>\n          </div>\n        </div>\n        {/* <div className=\"row\">\n          <div className=\"col-sm-2\"></div>\n          <div className=\"col-sm-8\">\n            <form>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search\"\n                onChange={searchInput}\n              ></input>\n            </form>\n          </div>\n          <div className=\"col-sm-2\"></div>\n        </div> */}\n        <p></p>\n        <div className=\"row\">\n          {data.result.map((item, i) => (\n            <CountriesRender key={i} graphData={item} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default countryBreakdown;\n","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, componentDidMount } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  CartesianGrid,\n} from \"recharts\";\n\nconst CountryGraph = ({ graphData }) => {\n  return (\n    <div className=\"graphRender\">\n      <ResponsiveContainer width=\"95%\" height={700}>\n      <LineChart data={graphData}>\n        <Line\n          strokeWidth={2}\n          type=\"monotone\"\n          dataKey=\"confirmed\"\n          stroke=\"#8884d8\"\n        />\n        <Line\n          strokeWidth={2}\n          type=\"monotone\"\n          dataKey=\"deaths\"\n          stroke=\"#FF2D00\"\n        />\n        <Line\n          strokeWidth={2}\n          type=\"monotone\"\n          dataKey=\"recovered\"\n          stroke=\"#27FF00\"\n        />\n        <XAxis dataKey=\"date\" />\n        <Legend />\n        <Tooltip />\n        <CartesianGrid />\n        <YAxis />\n      </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default CountryGraph;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable react-hooks/rules-of-hooks */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport lookup from \"country-code-lookup\";\nimport { getTodaysDate } from \"../../util\";\nimport Spinner from \"../../layout/spinner\";\n//Graph Import\nimport CountryGraph from \"../country-specific/page-components/country-graphs\";\nimport { countryBreakdown } from \"../../api/index\";\n\nexport default function country() {\n  const todaysDate = getTodaysDate();\n  //Top level Datastore\n  const [countryData, setCountryData] = useState([]);\n  const [startDate, setStartDate] = useState(\"2020-01-01\");\n  const [endDate, setEndDate] = useState(todaysDate);\n\n  let params = useParams();\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountryData(\n        await countryBreakdown(params.countryCode, startDate, endDate)\n      );\n    };\n    fetchAPI();\n  }, [startDate, endDate]);\n\n  const updateStartDate = (e) => {\n    setStartDate(e.target.value);\n  };\n  const updateEndDate = (e) => {\n    setEndDate(e.target.value);\n  };\n  const resetData = () => {\n    setStartDate(\"2020-01-01\")\n    setEndDate(todaysDate)\n  }\n\n  if (countryData.isError) {\n    return (\n      <div>\n        <h1>Ooops!</h1>\n        <h3>There has been an error</h3>\n        <h4>\n          {\" \"}\n          This may be because you selected dates that are not currently returned\n          by the api\n        </h4>\n        <Link\n          to=\"/covid-explorer/countries\"\n          className=\"btn btn-dark btn-sm mb-4\"\n        >\n          Click me to go back!\n        </Link>\n      </div>\n    );\n  }\n  if (countryData.result === undefined || countryData.result.length === 0) {\n    return <Spinner />;\n  } else {\n    const formattedCountry = lookup.byIso(params.countryCode);\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-sm-2\">\n            <Link\n              to=\"/covid-explorer/countries\"\n              className=\"btn btn-dark btn-sm mb-4\"\n            >\n              Go Back\n            </Link>\n          </div>\n          <div className=\"col-sm-2\">\n            <h3>{formattedCountry.country}</h3>\n          </div>\n          <div className=\"col-sm-6\">\n            <form>\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\"> Start and End Date </span>\n                </div>\n                  <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    placeholder=\"StartDate\"\n                    onChange={updateStartDate}\n                    defaultValue={startDate}\n                    min=\"2020-01-01\"\n                    max={todaysDate}\n                  />\n                  <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    placeholder=\"EndDate\"\n                    onChange={updateEndDate}\n                    defaultValue={todaysDate}\n                    min=\"2020-01-01\"\n                    max={todaysDate}\n                  />\n              </div>\n            </form>\n          </div>\n          <div className=\"col-sm-1\">\n          <button type=\"button\" className=\"btn btn-dark\" onClick={resetData}>Reset</button>\n          </div>\n        </div>\n\n        <CountryGraph graphData={countryData.result} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Page Imports\nimport Home from \"../pages/home/home\";\nimport CountryBreakdown from \"../pages/country-breakdown/country-breakdown-page\";\nimport CountryData from \"../pages/country-specific/country-specific\";\n\nexport default function Nav() {\n  return (\n    <Router>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"/covid-explorer\">\n          COVID-19 Explorer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav\">\n            <Link className=\"nav-item\" to=\"/covid-explorer\">\n              <li className=\"nav-link\">Home</li>\n            </Link>\n            <Link className=\"nav-item\" to=\"/covid-explorer/countries\">\n              <li className=\"nav-link\">Countries</li>\n            </Link>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/covid-explorer\" exact component={Home} />\n          <Route\n            path=\"/covid-explorer/countries\"\n            exact\n            component={CountryBreakdown}\n          />\n          <Route\n            path=\"/covid-explorer/country-data/:countryCode\"\n            exact\n            component={CountryData}\n          />\n        </Switch>\n      </div>\n      <div className=\"footer\">\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            <a\n              className=\"socialItemLink\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/edboorn\"\n            >\n              {\" \"}\n              Designed and built by Edward Boorn{\" \"}\n            </a>\n          </div>\n          <div className=\"col-sm-6\"> </div>\n          <div className=\"col-sm-2\">\n            <a\n              className=\"socialItemLink\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/CSSEGISandData/COVID-19\"\n            >\n              {\" \"}\n              Data Source{\" \"}\n            </a>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\n\nimport './App.css';\nimport Nav from '../src/layout/nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}